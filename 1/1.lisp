;; part 1
(let ((previous-entry nil)
      (increases 0))
  (with-open-file (stream "input.txt")
	  (do ((line (read-line stream nil)
		     (read-line stream nil)))
	      ((null line))
	    (let ((number (parse-integer line)))
	      (if (and previous-entry (> (parse-integer line) previous-entry))
		  (incf increases))
	      (setf previous-entry number))))
  (print increases))

;; part 2
(let ((previous-window-sum nil)
      (increases 0)
      (measurement-window '()))
  (with-open-file (stream "input.txt")
    (do ((line (read-line stream nil)
	       (read-line stream nil)))
	((null line))
      (let ((number (parse-integer line)))
	(cond ((< (list-length measurement-window) 3) (setf measurement-window (append measurement-window (list number))))
	      ((= (list-length measurement-window) 3) (let ((sum (reduce '+ measurement-window)))
							(print sum)
							(if (and previous-window-sum (> sum previous-window-sum))
							    (incf increases))
							(setf previous-window-sum sum)
							(setf measurement-window (append (cdr measurement-window) (list number)))))))))
  (if (and (= (list-length measurement-window) 3) previous-window-sum)
      (let ((sum (reduce '+ measurement-window)))
	(if (> sum previous-window-sum) (incf increases))))
  (print increases))

